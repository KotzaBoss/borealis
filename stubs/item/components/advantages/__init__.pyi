from typing import Any, Union

from components import Boolean, Component
from utils.enums import ABILITY, CONDITION, SKILL


class _Advantage_Type(Boolean):
    def __init__(self, on: Union[ABILITY, CONDITION, SKILL, bool] = ..., **kwargs: Any) -> None: ...

class _Advantage_Component(Component):
    def __init__(self, *advantages: _Advantage_Type) -> None: ...

    def update(self, char_sheet: Character) -> Any: ...

class Advantage(_Advantage_Component):
    def __init__(self, *advantages: _Advantage_Type) -> None: ...

    @property
    def advantage(self): ...

class Disadvantage(_Advantage_Component):
    def __init__(self, *disadvantages: _Advantage_Type) -> None: ...

    @property
    def disadvantage(self): ...

class OnAbilityCheck(_Advantage_Type):
    def __init__(self, ability: ABILITY = ...) -> None: ...

class OnAbilitySavingThrow(_Advantage_Type):
    def __init__(self, ability_saving_throw: ABILITY = ...) -> None: ...

class OnConditionSavingThrow(_Advantage_Type):
    def __init__(self, condition_saving_throw: CONDITION = ...) -> None: ...

class OnSkill(_Advantage_Type):
    def __init__(self, skill: SKILL = ...) -> None: ...

class OnAttack(_Advantage_Type):
    def __init__(self, bvalue: bool = ...) -> None: ...

class OnDeathSavingThrow(_Advantage_Type):
    def __init__(self, bvalue: bool = ...) -> None: ...
